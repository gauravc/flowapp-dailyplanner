generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  timezone      String    @default("UTC")
  emailVerified DateTime?
  image         String?
  
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  dayNotes      DayNote[]
  tags          Tag[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id            String   @id @default(cuid())
  userId        String
  title         String
  description   String?
  status        String   @default("open") // "open" | "done"
  priority      String?  // "A" | "B" | "C"
  scheduledFor  DateTime
  dueDate       DateTime?
  rolloverCount Int      @default(0)
  positionIndex Int      @default(0)
  
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags    TaskTag[]
  history TaskHistory[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId, scheduledFor])
  @@index([userId, status])
}

model Tag {
  id     String @id @default(cuid())
  userId String
  name   String
  
  user  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks TaskTag[]
  
  @@unique([userId, name])
}

model TaskTag {
  taskId String
  tagId  String
  
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([taskId, tagId])
}

model DayNote {
  id          String   @id @default(cuid())
  userId      String
  date        DateTime
  contentText String
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, date])
}

model TaskHistory {
  id     String   @id @default(cuid())
  taskId String
  type   String   // "create" | "complete" | "reopen" | "rollover" | "edit"
  at     DateTime @default(now())
  meta   String?  // JSON string
  
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
}